name: Fast Docker Build

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # 진짜 전역 캐시 (모든 브랜치가 공유)
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-universal-cache
        restore-keys: |
          ${{ runner.os }}-docker-universal-cache
          
    # 의존성 변경 감지 (코드만 바뀌면 스킵)
    - name: Check if rebuild needed
      id: check-rebuild
      run: |
        # Dockerfile이나 requirements.txt가 바뀌었는지 확인
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        else
          BASE_SHA="${{ github.event.before }}"
          HEAD_SHA="${{ github.sha }}"
        fi
        
        if git diff --name-only $BASE_SHA $HEAD_SHA | grep -E "(requirements\.txt|Dockerfile)"; then
          echo "rebuild=true" >> $GITHUB_OUTPUT
          echo "🔄 Docker dependencies changed - full rebuild needed"
        else
          echo "rebuild=false" >> $GITHUB_OUTPUT
          echo "⚡ Only code changed - using cached layers"
        fi
        
    # 빠른 빌드 (캐시 최대 활용)
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: popco-recommended:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        load: true
        
    # 캐시 최적화 (중요!)
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
    # 초간단 검증 (1초 이내)
    - name: Quick verification
      run: |
        echo "🚀 Quick Docker verification..."
        if docker images popco-recommended:latest | grep -q popco-recommended; then
          echo "✅ Docker image exists"
        else
          echo "❌ Docker image not found"
          exit 1
        fi
        echo "✅ Verification completed in seconds!"
        
    # 성능 리포트
    - name: Performance Summary
      run: |
        echo "## Fast Docker Build Results ⚡" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.check-rebuild.outputs.rebuild }}" == "true" ]; then
          echo "- **Build Type**: 🔄 Full rebuild (dependencies changed)" >> $GITHUB_STEP_SUMMARY
          echo "- **Expected Time**: ~5-7 minutes" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Build Type**: ⚡ Cache-optimized (code only)" >> $GITHUB_STEP_SUMMARY
          echo "- **Expected Time**: ~1-2 minutes" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Status**: ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
